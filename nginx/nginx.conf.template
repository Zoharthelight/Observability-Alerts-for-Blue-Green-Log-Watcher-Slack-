events {
    worker_connections 1024;
}
http {
    # Define the detailed log format that watcher.py needs
    log_format detailed_access '$remote_addr - $remote_user [$time_local] '
                               '"$request" $status $body_bytes_sent '
                               '"$http_referer" "$http_user_agent" '
                               'pool=$upstream_http_x_app_pool '
                               'release=$upstream_http_x_release_id '
                               'upstream=$upstream_addr '
                               'upstream_status=$upstream_status '
                               'upstream_response_time=$upstream_response_time '
                               'request_time=$request_time';
    
    # Write to shared log file
    access_log /var/log/nginx/access.log detailed_access;
    error_log /var/log/nginx/error.log warn;
    
    # Combined upstream with primary/backup logic
    upstream app_backend {
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        server app_green:3000 backup;
    }
    
    server {
        listen 80;
        
        # Proxy timeout settings - tight for quick failover
        proxy_connect_timeout 2s;
        proxy_send_timeout 3s;
        proxy_read_timeout 3s;
        
        # Enable retries on errors, timeouts, and 5xx responses
        proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
        proxy_next_upstream_tries 2;
        proxy_next_upstream_timeout 10s;
        
        location / {
            proxy_pass http://app_backend;
            
            # Forward original headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Don't buffer - immediate response
            proxy_buffering off;
            
            # Pass through app headers (X-App-Pool, X-Release-Id)
            proxy_pass_request_headers on;
        }
    }
}
